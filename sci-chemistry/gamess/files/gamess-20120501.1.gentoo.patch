diff -urN gamess.orig/comp gamess/comp
--- gamess.orig/comp	2012-05-28 12:21:34.887403398 +0300
+++ gamess/comp	2012-05-28 13:45:38.415079520 +0300
@@ -1486,7 +1486,7 @@
 #   g77 does not support FORTRAN logical units above 99, or 128 bit math.
 #
    case g77:
-   set OPT = '-O2'
+   set gentoo-OPT = '-O2'
    if ($MODULE == ormas1) set OPT='-O2 -fno-move-all-movables' # RH9, g77 3.3
    if ($MODULE == zheev)  set OPT='-O0'  # defensive compiling
    if (($MODULE == qeigen) || ($MODULE == int2c)) then
@@ -1516,7 +1516,7 @@
 #      -std=legacy  suppresses warnings about use of f77 constructs.
 #
    case gfortran:
-   set OPT='-O2'
+   set gentoo-OPT='-O2'
    if ($MODULE == zheev)  set OPT='-O0'  # defensive compiling
    if ($MODULE == pcmcv2) set OPT='-O1'  # EFP+CPCM, ala Francois, v4.1.2
    if (($MODULE == qeigen) || ($MODULE == int2c)) then
@@ -1542,7 +1542,7 @@
 #    optimizations in 32 bit mode, as a function of the ifort version.
 #
    case ifort:
-   set OPT = '-O3'
+   set gentoo-OPT = '-O2'
    if ($MODULE == delocl) set OPT='-O0'  # from Cheol
    if ($MODULE == prpamm) set OPT='-O0'  # for exam13
    if ($MODULE == zheev)  set OPT='-O0'
@@ -1661,13 +1661,14 @@
 #           -finit-real=<zero|inf|-inf|nan>  could be interesting debug opt
 #           -fno-automatic forces static storage of all local variables
 #           -fno-whole-file suppresses argument's data type checking
-      set OPT='-O2'
+      set gentoo-OPT='-O2'
+      set extraflags=''
       if (".$GMS_DEBUG_FLAGS" != .) set OPT="$GMS_DEBUG_FLAGS"
       if ($GMS_GFORTRAN_VERNO == 4.6) then
          if ($MODULE == tddgrd) set OPT='-O0'   # this issue seen in 4.6.1
       endif
       if ($MODULE == zheev)  set OPT='-O0'  # defensive compiling
 #        as of 4.6 tested in late 2011, gfortran can do q.p.!
       switch ($GMS_GFORTRAN_VERNO)
          case 4.0:
          case 4.1:
@@ -1675,7 +1676,6 @@
          case 4.3:
          case 4.4:
          case 4.5:
-            set extraflags=''
             if (($MODULE == qeigen) || ($MODULE == int2c)) then
                mv -f $MODULE.f $MODULE.junk
                sed -e "s/Q-/D-/g" \
@@ -1687,6 +1687,11 @@
          case 4.6:
             set extraflags='-fno-whole-file'
             breaksw
+         case 4.7:
+            if ($MODULE == fmoio) set OPT='-O2'  # exam37
+            if ($MODULE == tddgrd) set OPT='-O0' # exam41
+            if ($MODULE == dcscf) set OPT='-O0'  # exam44
+            breaksw
          default:
             echo Unrecognized gfortran version
             exit 4
@@ -1713,7 +1718,7 @@
 #     -WB means warn but don't fail on out-of-bounds array references
 #     -ftz flushes underflow results to zero
 #
-      set OPT = '-O2'
+      set gentoo-OPT = '-O2'
       if (".$GMS_DEBUG_FLAGS" != .) set OPT="$GMS_DEBUG_FLAGS"
 #       alas, I'm so tired of hearing about so many versions failing to
 #       diagonalize, that this time critical code is run w/o optimization.
@@ -1882,7 +1887,7 @@
       unset echo
       breaksw
    case gfortran:
-      set OPT='-O2'
+      set gentoo-OPT='-O2'
       if ($MODULE == zheev)  set OPT='-O0'  # defensive compiling
       if (($MODULE == qeigen) || ($MODULE == int2c)) then
          mv -f $MODULE.f $MODULE.junk
diff -urN gamess.orig/compall gamess/compall
--- gamess.orig/compall	2011-05-17 22:53:33.000000000 +0200
+++ gamess/compall	2011-10-11 12:13:30.041087251 +0200
@@ -84,12 +84,11 @@
    endif
 endif
 if ($TARGET == linux32)      set extraflags='-DLINUX32'
-if ($TARGET == linux64)      then
+if ($TARGET == linux64) then
+	set chip=`uname -m`
 #      Ubuntu uses the non-standard -m flag, its -p replies "unknown"
-                         set chip=`uname -p`
-   if ($chip == unknown) set chip=`uname -m`
-   if ($chip == x86_64) set extraflags='-DLINUX64 -m64'
-   if ($chip == ia64)   set extraflags='-DLINUX64'  # this always 64 bits
+   	if ($chip == x86_64) set extraflags='-DLINUX64 -m64'
+   	if ($chip == ia64)   set extraflags='-DLINUX64'  # this always 64 bits
 endif
 if ($TARGET == mac32)        set extraflags='-DLINUX32'
 if ($TARGET == mac64)    set extraflags='-DLINUX64 -m64 -I/usr/include/malloc'
diff -urN gamess.orig/ddi/compddi gamess/ddi/compddi
--- gamess.orig/ddi/compddi	2011-02-15 21:31:30.000000000 +0100
+++ gamess/ddi/compddi	2011-10-11 12:23:45.513796580 +0200
@@ -634,7 +634,7 @@
 
      set FORTRAN=$GMS_FORTRAN   # might be g77, gfortran, ifort, pgf77, f2c
 
-     set CC = 'gcc'
+     set gentoo-CC = 'gcc'
      set CFLAGS = "-DLINUX -O3 -fstrict-aliasing -I./"
      set CLIBS  = "-lpthread"
 
@@ -687,7 +687,7 @@
                              set ARCH='-m64'
      if (`uname -p` == ia64) set ARCH=''
 
-     set CC = 'gcc'
+     set gentoo-CC = 'gcc'
      set CFLAGS = "-DLINUX $ARCH -O3 -fstrict-aliasing -I./"
      set CLIBS  = "-lpthread"
 
diff -urN gamess.orig/ddi/kickoff/ddikick.c gamess/ddi/kickoff/ddikick.c
--- gamess.orig/ddi/kickoff/ddikick.c	2008-05-06 12:16:12.000000000 +0200
+++ gamess/ddi/kickoff/ddikick.c	2011-10-11 12:25:11.862714681 +0200
@@ -105,7 +105,7 @@
           remoteshell = argv[++i];
        } else {
           if((remoteshell = getenv("DDI_RSH")) == NULL) {
-              remoteshell = (char *) strdup("rsh");
+              remoteshell = (char *) strdup("ssh");
           }
        }
 
diff -urN gamess.orig/lked gamess/lked
--- gamess.orig/lked	2011-08-11 17:41:02.000000000 +0200
+++ gamess/lked	2011-10-11 12:26:38.564634821 +0200
@@ -53,7 +53,7 @@
 #
 #   3. optional Nuclear-Electronic Orbital method, using NEO code
 #
-set NEO=false
+set NEO=true
 #
 #   4. optional Nvidia/CUDA code, for closed shell SCF Fock construction 
 #         see ~/gamess/libcchem/aaa.readme.1st for more information
@@ -356,17 +356,17 @@
    switch ($GMS_FORTRAN)
      case g77:
         set LDR='g77'
-        set LDOPTS=' '  # add '-Wl,-M' to see load map
+        set gentoo-LDOPTS=' '  # add '-Wl,-M' to see load map
         set FORTLIBS=' '
         breaksw
      case gfortran:
         set LDR='gfortran'
-        set LDOPTS=' '
+        set gentoo-LDOPTS=' '
         set FORTLIBS=' '
         breaksw
      case ifort:
         set LDR='ifort'
-        set LDOPTS=' '  # add '-Wl,-M' to see load map
+        set gentoo-LDOPTS=' '  # add '-Wl,-M' to see load map
         set FORTLIBS='-Vaxlib'
         breaksw
      case pgf77:
@@ -376,7 +376,7 @@
         breaksw
      case f2c:
         set LDR='gcc'
-        set LDOPTS=' '
+        set gentoo-LDOPTS=' '
         set FORTLIBS='-lf2c -lm'
         breaksw
      default:
@@ -427,12 +427,7 @@
       #     Otherwise, attempt a link against shared object libs.
       #     See the 64 bit Atlas below for a way to fix the linker's
       #     not being able to locate -lf77blas, if that happens.
-      if (-e $GMS_MATHLIB_PATH/libf77blas.a) then
-         set MATHLIBS="$GMS_MATHLIB_PATH/libf77blas.a"
-         set MATHLIBS="$MATHLIBS $GMS_MATHLIB_PATH/libatlas.a"
-      else
-         set MATHLIBS="-L$GMS_MATHLIB_PATH -lf77blas -latlas"
-      endif
+      set MATHLIBS=`${PKG_CONFIG} --libs blas`
       set BLAS=' '
       breaksw
 
@@ -466,12 +461,12 @@
    switch ($GMS_FORTRAN)
       case gfortran:
          set LDR='gfortran'
-         set LDOPTS=' '
+         set gentoo-LDOPTS=' '
          set FORTLIBS=' '
          breaksw
       case ifort:
          set LDR='ifort'
-         set LDOPTS='-i8'  # -Wl,-M generates a load map
+         set gentoo-LDOPTS=' '  # -Wl,-M generates a load map
 #            this auxiliary library seems to have disappeared in ifort 10
          set FORTLIBS=' '
          if($GMS_IFORT_VERNO < 10) set FORTLIBS='-Vaxlib'
@@ -556,12 +551,7 @@
       #          ln -s liblapack_atlas.so.3.0 liblapack.so
       #          ln -s liblapack.so.3.0       liblapack.so
       #     It is strange the RPM's don't do these soft links for us.
-      if (-e $GMS_MATHLIB_PATH/libf77blas.a) then
-         set MATHLIBS="$GMS_MATHLIB_PATH/libf77blas.a"
-         set MATHLIBS="$MATHLIBS $GMS_MATHLIB_PATH/libatlas.a"
-      else
-         set MATHLIBS="-L$GMS_MATHLIB_PATH -lf77blas -latlas"
-      endif
+      set MATHLIBS=`${PKG_CONFIG} --libs blas`
       set BLAS=' '
       breaksw
 
diff -urN gamess.orig/runall gamess/runall
--- gamess.orig/runall	2012-05-28 13:58:18.589671828 +0300
+++ gamess/runall	2012-05-28 14:00:57.635712103 +0300
@@ -46,7 +46,7 @@
      xgms -v $VERNO -q $QUEUE -l exam$NUM.log exam$NUM
      sleep 2
   else
-     ./rungms exam$NUM $VERNO 1  >&  exam$NUM.log
+     rungms exam$NUM $VERNO 1  >&  exam$NUM.log
   endif
   @ i++
 end
diff -urN gamess.orig/rungms gamess/rungms
--- gamess.orig/rungms	2012-05-28 14:03:08.390784789 +0300
+++ gamess/rungms	2012-05-28 14:18:12.424545548 +0300
@@ -57,9 +57,9 @@
 #       See also a very old LoadLeveler "ll-gms" for some IBM systems.
 #
 set TARGET=sockets
-set SCR=/scr/$USER
-set USERSCR=~$USER/scr
-set GMSPATH=/u1/mike/gamess
+set SCR=`pwd`
+set USERSCR=`pwd`
+set GMSPATH=/usr/bin
 #
 set JOB=$1      # name of the input file xxx.inp, give only the xxx part
 set VERNO=$2    # revision number of the executable created by 'lked' step
@@ -1033,7 +1033,7 @@
 #   in the case of GDDI runs, we save the first PUNCH file only.
 #   If something goes wrong, the .F06.00x, .F07.00x, ... from the
 #   other groups are potentially interesting to look at.
-if ($GDDIjob == true) cp $SCR/$JOB.F07 ~/scr/$JOB.dat
+if ($GDDIjob == true) cp $SCR/$JOB.F07 $SCR/$JOB.dat
 #
 #   Clean up the master's scratch directory.
 #
diff -urN gamess.orig/rungms gamess/rungms
--- gamess.orig/gms-files.csh	2012-05-28 17:14:57.137387985 +0300
+++ gamess/gms-files.csh	2012-05-28 17:15:31.828413312 +0300
@@ -28,7 +28,7 @@
 #     to see all the file definitions (one is just below).
 #
 #---quiet---set echo
-setenv AUXDATA $GMSPATH/auxdata
+setenv AUXDATA /usr/share/gamess
 setenv  EXTBAS /dev/null
 setenv  NUCBAS /dev/null
 setenv  POSBAS /dev/null
